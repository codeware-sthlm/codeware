import type { Payload } from 'payload';
import type { TypeWithID } from 'payload/types';

import type { Tenant } from '../../generated/payload-types';

export type TenantData = Pick<Tenant, 'name' | 'description' | 'apiKey'> & {
  hosts: Array<string>;
};

const collection = 'tenants';

/**
 * Ensure that a tenant exists and has an API key created.
 *
 * Only one host can be added to domains when creating a tenant.
 * More hosts is better added via admin UI.
 *
 * When the API key is not provided, it will be generated by Payload.
 *
 * @param payload - Payload instance
 * @param data - Tenant data
 * @returns The tenant ID if exists or created, otherwise undefined
 * @throws Never - just logs errors
 */
export async function ensureTenant(
  payload: Payload,
  data: TenantData
): Promise<TypeWithID['id'] | undefined> {
  try {
    const { apiKey, description, hosts, name } = data;

    // Check if the tenant exists with the given host (name )
    const tenants = await payload.find({
      collection,
      where: {
        and: [{ name: { equals: name } }, { 'domains.domain': { in: hosts } }]
      },
      pagination: false
    });

    if (tenants.totalDocs > 1) {
      throw new Error(
        `[SEED] Multiple tenants found with name '${name}' and a matching host '${hosts.join(', ')}', skip`
      );
    }

    if (tenants.totalDocs === 1) {
      payload.logger.info(
        `[SEED] Skip: Tenant '${name}' with a matching host '${hosts.join(', ')}' exist`
      );
      return tenants.docs[0].id;
    }

    // No tenant found, create one

    const tenant = await payload.create({
      collection,
      data: {
        enableAPIKey: true,
        apiKey,
        description,
        domains: hosts.map((host) => ({ domain: host })),
        name
      } satisfies Partial<Tenant>
    });

    payload.logger.info(
      `[SEED] Tenant '${name}' (${apiKey}) with ${hosts.length} hosts was created`
    );

    return tenant.id;
  } catch (error) {
    console.error(error);
    return undefined;
  }
}
