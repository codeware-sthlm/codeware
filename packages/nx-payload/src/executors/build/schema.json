{
  "version": 2,
  "title": "Payload builder",
  "description": "Build a Payload application.",
  "type": "object",
  "properties": {
    "main": {
      "type": "string",
      "description": "The path to the entry file, relative to project.",
      "x-completion-type": "file",
      "x-completion-glob": "**/*@(.ts|.tsx)",
      "x-priority": "important"
    },
    "outputPath": {
      "type": "string",
      "description": "The output path of the generated files.",
      "x-completion-type": "directory",
      "x-priority": "important"
    },
    "tsConfig": {
      "type": "string",
      "description": "The path to tsconfig file.",
      "x-completion-type": "file",
      "x-completion-glob": "tsconfig.*.json",
      "x-priority": "important"
    },
    "outputFileName": {
      "type": "string",
      "description": "Name of the main output file. Used by the node executor to serve the bundle properly.",
      "x-completion-type": "file",
      "x-completion-glob": "**/*@(.js|.mjs|.cjs)"
    },
    "assets": {
      "type": "array",
      "description": "List of static application assets. Defaults to project source assets folder.",
      "items": {
        "$ref": "#/definitions/assetPattern"
      }
    },
    "bundle": {
      "type": "boolean",
      "description": "Whether to bundle the main entry point and additional entry points. Set to false to keep individual output files.",
      "default": false
    },
    "deleteOutputPath": {
      "type": "boolean",
      "description": "Delete output path before build.",
      "x-alias": "clean",
      "default": true
    },
    "format": {
      "type": "array",
      "description": "List of module formats to output.",
      "enum": ["esm", "cjs"],
      "default": ["cjs"]
    },
    "generatePackageJson": {
      "type": "boolean",
      "description": "Generates a package.json and pruned lock file with the project's node_module dependencies populated for installing in a container. If a package.json exists in the project's directory, it will be reused with dependencies populated.",
      "default": true
    },
    "metafile": {
      "type": "boolean",
      "description": "Generate a meta.json file in the output folder that includes metadata about the build. This file can be analyzed by other tools.",
      "default": false
    },
    "minify": {
      "type": "boolean",
      "description": "Minify the outputs.",
      "default": false
    },
    "outputHashing": {
      "type": "string",
      "description": "Define the output filename cache-busting hashing mode.",
      "default": "none"
    },
    "platform": {
      "type": "string",
      "description": "Platform target for outputs.",
      "enum": ["browser", "node", "neutral"],
      "default": "neutral"
    },
    "sourcemap": {
      "type": "boolean",
      "description": "Generate source map files.",
      "default": false
    },
    "target": {
      "type": "string",
      "description": "The environment target for outputs.",
      "default": "esnext"
    }
  },
  "required": ["main", "outputPath", "tsConfig"],
  "definitions": {
    "assetPattern": {
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "glob": {
              "type": "string",
              "description": "The pattern to match."
            },
            "input": {
              "type": "string",
              "description": "The input directory path in which to apply 'glob'. Defaults to the project root."
            },
            "ignore": {
              "description": "An array of globs to ignore.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "output": {
              "type": "string",
              "description": "Absolute path within the output."
            }
          },
          "additionalProperties": false,
          "required": ["glob", "input", "output"]
        },
        {
          "type": "string"
        }
      ]
    }
  }
}
