// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`application generator should create Dockerfile for npm package manager 1`] = `
"
FROM node:22-alpine as base

FROM base as builder

WORKDIR /app

COPY package.json ./

RUN npm install

COPY . .

# Fix for pnpm workspaces (remove it when not applicable):
# The lock file is hidden from the build process when included in the .gitignore file.
# Since package-lock.json is needed when building the app, we'll remove it from .gitignore.
RUN sed -i '/package-lock.json/d' .gitignore

RUN npx nx build test-app

FROM base as runtime

ENV NODE_ENV production
ENV PAYLOAD_CONFIG_PATH="dist/server/apps/test-dir/src/payload.config.js"

WORKDIR /app

COPY --from=builder /app/dist/apps/test-dir/package.json ./

RUN npm install --omit=dev

COPY --from=builder /app/dist/apps/test-dir ./dist

EXPOSE 3000
CMD ["node", "dist/server/main.js"]
"
`;

exports[`application generator should not setup plugin inference when 'useInferencePlugins' is 'false' 1`] = `
{
  "$schema": "../../node_modules/nx/schemas/project-schema.json",
  "name": "test-app",
  "projectType": "application",
  "root": "apps/test-dir",
  "sourceRoot": "apps/test-dir/src",
  "tags": [],
  "targets": {
    "build": {
      "cache": true,
      "configurations": {
        "development": {
          "sourcemap": true,
        },
        "production": {},
      },
      "defaultConfiguration": "production",
      "dependsOn": [
        "^build",
      ],
      "executor": "@cdwr/nx-payload:build",
      "metadata": {
        "description": "Build the Payload admin application",
        "technologies": [
          "node",
        ],
      },
      "options": {
        "assets": [
          "{projectRoot}/src/assets",
        ],
        "bundle": false,
        "deleteOutputPath": true,
        "esbuildOptions": {
          "outExtension": {
            ".js": ".js",
          },
          "outdir": "{workspaceRoot}/dist/{projectRoot}/server",
        },
        "format": [
          "cjs",
        ],
        "generatePackageJson": true,
        "main": "apps/test-dir/src/main.ts",
        "outputFileName": "server/main.js",
        "outputHashing": "none",
        "outputPath": "dist/apps/test-dir",
        "platform": "node",
        "target": "esnext",
        "tsConfig": "apps/test-dir/tsconfig.app.json",
        "watch": false,
      },
    },
    "lint": {
      "executor": "@nx/eslint:lint",
    },
    "payload": {
      "executor": "nx:run-commands",
      "metadata": {
        "description": "Run a native Payload command",
        "technologies": [
          "node",
        ],
      },
      "options": {
        "command": "npx payload",
        "env": {
          "PAYLOAD_CONFIG_PATH": "{projectRoot}/src/payload.config.ts",
        },
        "forwardAllArgs": true,
      },
    },
    "serve": {
      "cache": false,
      "configurations": {
        "development": {
          "buildTarget": "test-app:build:development",
        },
        "production": {
          "buildTarget": "test-app:build:production",
        },
      },
      "defaultConfiguration": "development",
      "executor": "@nx/js:node",
      "metadata": {
        "description": "Serve Payload admin application in development mode",
        "technologies": [
          "node",
        ],
      },
      "options": {
        "buildTarget": "test-app:build",
        "runBuildTargetDependencies": true,
      },
    },
    "test": {
      "executor": "@nx/jest:jest",
      "options": {
        "jestConfig": "{projectRoot}/jest.config.ts",
        "passWithNoTests": true,
      },
      "outputs": [
        "{workspaceRoot}/coverage/{projectRoot}",
      ],
    },
  },
}
`;

exports[`application generator should setup plugin inference when 'useInferencePlugins' doesn't exist 1`] = `
{
  "$schema": "../../node_modules/nx/schemas/project-schema.json",
  "name": "test-app",
  "projectType": "application",
  "root": "apps/test-dir",
  "sourceRoot": "apps/test-dir/src",
  "tags": [],
  "targets": {
    "lint": {
      "executor": "@nx/eslint:lint",
    },
    "test": {
      "executor": "@nx/jest:jest",
      "options": {
        "jestConfig": "{projectRoot}/jest.config.ts",
        "passWithNoTests": true,
      },
      "outputs": [
        "{workspaceRoot}/coverage/{projectRoot}",
      ],
    },
  },
}
`;

exports[`application generator should setup plugin inference when 'useInferencePlugins' is 'true' 1`] = `
{
  "$schema": "../../node_modules/nx/schemas/project-schema.json",
  "name": "test-app",
  "projectType": "application",
  "root": "apps/test-dir",
  "sourceRoot": "apps/test-dir/src",
  "tags": [],
  "targets": {
    "lint": {
      "executor": "@nx/eslint:lint",
    },
    "test": {
      "executor": "@nx/jest:jest",
      "options": {
        "jestConfig": "{projectRoot}/jest.config.ts",
        "passWithNoTests": true,
      },
      "outputs": [
        "{workspaceRoot}/coverage/{projectRoot}",
      ],
    },
  },
}
`;
