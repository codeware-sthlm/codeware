import express from 'express';
import payload from 'payload';

import env from './env/env.resolver';

const startServer = async () => {
  try {
    console.log('Starting server');

    // Create an Express server
    const app = express();
    const port = env.PORT;

    // Redirect root to Admin panel
    app.get('/', (_, res) => res.redirect('/admin'));

    // Initialize Payload
    await payload.init({
      secret: env.PAYLOAD_SECRET,
      express: app,
      disableDBConnect: env.DISABLE_DB_CONNECT,
      onInit: async (p) => {
        p.logger.info(`Payload Admin URL: ${p.getAdminURL()}`);
        p.logger.info(`Using DB adapter: ${p.db.name}`);
      },
    });

    payload.logger.info('Payload initialized');

    // After Payload is initialized your migrations are ready to run.
    // await payload.db.migrate();

    app
      .listen(port, () =>
        console.log(`[ started ] on port ${port} (${env.NODE_ENV})`)
      )
      .on('error', (error) => console.error(`[ error ] ${error.message}`))
      .on('close', () => console.log('[ closed ]'));
  } catch (error) {
    console.error('Failed to start server:', error);
    process.exit(1);
  }
};

startServer();
