import path from 'path';
import { fileURLToPath } from 'url';
<% if(database === 'mongodb') { %>
import { mongooseAdapter } from '@payloadcms/db-mongodb';
<% } else { %>
import { postgresAdapter } from '@payloadcms/db-postgres';
<% } %>import { lexicalEditor } from '@payloadcms/richtext-lexical';
import { buildConfig } from 'payload';

import { Media } from './collections/Media';
import { Users } from './collections/Users';

const filename = fileURLToPath(import.meta.url);
const dirname = path.dirname(filename);

export default buildConfig({
  admin: {
    user: Users.slug,
    importMap: {
      baseDir: path.resolve(dirname)
    }
  },
  collections: [Users, Media],
  editor: lexicalEditor(),
  secret: process.env.PAYLOAD_SECRET || '',<% if(database === 'mongodb') { %>
  db: mongooseAdapter({
    url: process.env.DATABASE_URI || ''
  }),
  <% } else { %>
  db: postgresAdapter({
    pool: {
      connectionString: process.env.DATABASE_URI || ''
    },
    prodMigrations: migrations
  }),
  <% } %>typescript: {
    outputFile: path.resolve(dirname, 'generated', 'payload-types.ts'),
  },
  graphQL: {
    disable: true,
    schemaOutputFile: path.resolve(dirname, 'generated', 'schema.graphql'),
  }
});
