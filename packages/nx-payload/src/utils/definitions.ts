import { type PackageManager, TargetConfiguration } from '@nx/devkit';

/** Map package manager to lock file name */
export const packageManagerLockFiles: Record<PackageManager, string> = {
  bun: 'bun.lockb',
  npm: 'package-lock.json',
  pnpm: 'pnpm-lock.yaml',
  yarn: 'yarn.lock'
};

/**
 * All plugin targets.
 */
export const targets = [
  'build',
  'gen',
  'lint',
  'payload',
  'serve',
  'test',
  'dx:docker-run',
  'dx:docker-build',
  'dx:mongodb',
  'dx:postgres',
  'dx:start',
  'dx:stop'
] as const;

/**
 * All plugin targets.
 *
 * `generate` is aliased to `gen` to avoid conflict with native `nx generate`.
 */
export type Target = (typeof targets)[number];

/**
 * Targets that are generated by the plugin when inference is disabled.
 */
export const generatorTargets = [
  'build',
  'gen',
  'lint',
  'payload',
  'serve',
  'test'
] satisfies Array<Target>;

/**
 * Targets that are generated by the plugin when inference is disabled.
 */
export type GeneratorTarget = (typeof generatorTargets)[number];

/**
 * Targets that can be inferred by the plugin.
 */
export const inferredTargets = [
  'build',
  'gen',
  'payload',
  'serve',
  'dx:docker-run',
  'dx:docker-build',
  'dx:mongodb',
  'dx:postgres',
  'dx:start',
  'dx:stop'
] satisfies Array<Target>;

/**
 * Targets that can be inferred by the plugin.
 *
 * `lint` and `test` are generated by the parent plugin generator.
 */
export type InferredTarget = (typeof inferredTargets)[number];

const dxPrefix = 'Developer experience (DX)';
/**
 * Metadata for inferred targets.
 */
export const metadata: Record<InferredTarget, TargetConfiguration['metadata']> =
  {
    build: {
      description: 'Build the Payload admin application',
      technologies: ['node']
    },
    gen: {
      description:
        'Generate types and GraphQL schema (if enabled) from the Payload configuration',
      technologies: ['node']
    },
    payload: {
      description: 'Run a native Payload command',
      technologies: ['node']
    },
    serve: {
      description: 'Serve Payload admin application in development mode',
      technologies: ['node']
    },
    'dx:docker-run': {
      description: `${dxPrefix} - Run the Docker image from 'dx:docker-build' target`,
      technologies: ['docker']
    },
    'dx:docker-build': {
      description: `${dxPrefix} - Build a Docker image for Payload admin application`,
      technologies: ['docker']
    },
    'dx:mongodb': {
      description: `${dxPrefix} - Start a Mongo database in Docker container`,
      technologies: ['docker']
    },
    'dx:postgres': {
      description: `${dxPrefix} - Start a Postgres database in Docker container`,
      technologies: ['docker']
    },
    'dx:start': {
      description: `${dxPrefix} - Start Payload admin application and Mongo and Postgres databases in Docker containers`,
      technologies: ['docker']
    },
    'dx:stop': {
      description: `${dxPrefix} - Stop all Docker containers started by 'dx:start' target`,
      technologies: ['docker']
    }
  };
