{
  "name": "codeware",
  "$schema": "node_modules/nx/schemas/project-schema.json",
  "tags": ["scope:codeware", "type:workspace"],
  "targets": {
    "lint": { "executor": "nx:noop" },
    "local-registry": {
      "metadata": {
        "description": "Start a local Verdaccio registry"
      },
      "executor": "@nx/js:verdaccio",
      "options": {
        "config": ".verdaccio/config.yml",
        "port": 4873,
        "listenAddress": "0.0.0.0",
        "storage": "tmp/local-registry/storage"
      },
      "configurations": {
        "ci": {
          "listenAddress": "localhost"
        }
      }
    },
    "local-registry:publish": {
      "metadata": {
        "description": "Publish all packages to local registry"
      },
      "command": "pnpm nx release version --stage-changes false --git-commit false --git-tag false --first-release true && pnpm nx release publish --tag local --first-release true"
    },
    "release-cli": {
      "metadata": {
        "description": "Run Nx release CLI to create new releases or publish pending releases"
      },
      "command": "pnpm tsx ./packages/core/src/lib/release/run-release.ts"
    },
    "payload-proxy": {
      "executor": "nx:run-commands",
      "metadata": {
        "description": "Run docker compose commands for the Payload proxy"
      },
      "options": {
        "commands": ["docker compose"],
        "cwd": "tools/payload-proxy",
        "forwardAllArgs": true
      }
    },
    "payload-proxy:up": {
      "metadata": {
        "description": "Start multi-tenant Payload proxy to simulate multiple web clients"
      },
      "command": "pnpm nx payload-proxy -- up -d"
    },
    "payload-proxy:down": {
      "metadata": {
        "description": "Stop multi-tenant Payload proxy"
      },
      "command": "pnpm nx payload-proxy -- down"
    },
    "generate-js-lib": {
      "metadata": {
        "description": "Generate a new TypeScript library"
      },
      "command": "test -z '{args.name}' && echo Error: Argument --name required || pnpm nx g @nx/js:lib {args.name} --directory {args.directory} --importPath @codeware/{args.name} --bundler=none --publishable=false --dry-run={args.dry-run}"
    },
    "generate-js-package": {
      "metadata": {
        "description": "Generate a new TypeScript ESBuild package"
      },
      "command": "test -z '{args.name}' && echo Error: Argument --name required || pnpm nx g @nx/js:lib {args.name} --directory packages/{args.name} --importPath @codeware/{args.name} --dry-run={args.dry-run}"
    },
    "shadcn:info": {
      "executor": "nx:run-commands",
      "metadata": {
        "description": "Print Shadcn information"
      },
      "options": {
        "command": "pnpm shadcn info",
        "env": {
          "TS_NODE_PROJECT": "tsconfig.base.json"
        }
      }
    },
    "shadcn:add": {
      "executor": "nx:run-commands",
      "metadata": {
        "description": "Generate a new Shadcn UI component"
      },
      "options": {
        "command": "pnpm shadcn add",
        "env": {
          "TS_NODE_PROJECT": "tsconfig.base.json"
        }
      }
    }
  }
}
